{
	"info": {
		"_postman_id": "b32bb2a6-2b85-4864-8df9-ccbc9f96cb73",
		"name": "Smoke API integration testing",
		"description": "Test case for API.\r\nMember signup\r\n1. Create member. (create new member every run) - in progress\r\nJWT (auth)\r\n- Xadd a queue item into X external service\r\n2. Verify email?? (https://mailsac.com/pricing) - in progress\r\n---\r\n- Create github motionelements-automation-test repo for testing codes\r\n--- cypress\r\n--- newman\r\n- Deploy it to circleCI\r\n- script postman/newman\r\n\r\n3. List credit packs.\r\n4. Create order for credit pack.\r\n5. Make payment for order using Stripe (sandbox). => order completed.\r\n6. Check credits deposited.\r\n7. Download product using credits.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Member signup test flow ",
			"item": [
				{
					"name": "Signup with mail validation",
					"item": [
						{
							"name": "Signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "713a5555-1dec-4b9b-9772-af2f455807dd",
										"exec": [
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"var data = response.data;\r",
											"var user_id = response.data.id;\r",
											"var full_name = data.full_name;\r",
											"var first_name = data.first_name;\r",
											"var last_name = data.last_name;\r",
											"var username = data.username;\r",
											"var email = data.email;\r",
											"var email_verified = data.email_verified;\r",
											"\r",
											"pm.test(\"Response is ok\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"user_id: \" + user_id, function () {\r",
											"    pm.expect(user_id).to.not.be.null;\r",
											"    pm.environment.set(\"user_id\", user_id)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"full_name: \" + full_name, function () {\r",
											"    pm.expect(full_name).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"first_name: \" + first_name, function () {\r",
											"    pm.expect(first_name).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"last_name: \" + last_name, function () {\r",
											"    pm.expect(last_name).to.not.be.empty;\r",
											"});\r",
											"\r",
											"pm.test(\"username: \" + username, function () {\r",
											"    pm.expect(username).to.be.null;\r",
											"});\r",
											"\r",
											"pm.test(\"email: \" + email, function () {\r",
											"    pm.expect(email).to.not.be.empty;\r",
											"    pm.environment.set(\"email\", email)\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"email_verified: \" + email_verified, function () {\r",
											"    pm.expect(email_verified).to.be.false;\r",
											"\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "me.qa+{{$timestamp}}@mailsac.com",
											"description": "email",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{signup_password}}",
											"description": "password",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "foo",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "bar",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v2/account/signup",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v2",
										"account",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Check Mail Inbox for validation message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef72b205-f118-424a-8cc3-48680a9b7101",
										"exec": [
											"var response = JSON.parse(responseBody);",
											"var _id = response[0]._id;",
											"var address = response[0].to[0].address;",
											"var activationLink = response[0].links[0];",
											"var subject = response[0].subject;",
											"",
											"",
											"pm.test(\"response is ok\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"_id \", function () {",
											"    pm.expect(_id).to.be.string;",
											"    pm.environment.set('messageIDFreelancer', _id);",
											"});",
											"",
											"pm.test(\"Address: \" + address, function () {",
											"    pm.expect(_id).to.be.string;",
											"    var email = pm.environment.get('email');",
											"    pm.expect(address).to.eql(email);",
											"});",
											"",
											"pm.test(\"Subject: \" + subject, function () {",
											"    pm.expect(subject).to.be.string;",
											"    pm.expect(subject).to.eql(\"Activate your MotionElements account\");",
											"});",
											"",
											"pm.test(\"Activation Link\", function () {",
											"    pm.environment.set('activationLink', activationLink);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "mailsac.com",
										"type": "text"
									},
									{
										"key": "Mailsac-Key",
										"value": "{{mailsacApi}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://mailsac.com/api/addresses/{{email}}/messages",
									"protocol": "https",
									"host": [
										"mailsac",
										"com"
									],
									"path": [
										"api",
										"addresses",
										"{{email}}",
										"messages"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Validation Message",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19bac447-13b7-41c9-85d1-85f935ca20f6",
										"exec": [
											"responseHTML = cheerio(pm.response.text());\r",
											"//var category = responseHTML.find('td.emailButton:contains(\"http://email.mailgun.motionelements.com/o/\")').link();\r",
											"var category = responseHTML.find('td.emailButton').children().attr(\"href\");\r",
											"\r",
											"//a.find('.td.emailButton').find('img').attr('src');\r",
											"\r",
											"var categoryStr = String(category);\r",
											"\r",
											"\r",
											"pm.test(\"response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Mail parser for usable activation link\", function () {\r",
											"    var code = category.replace(\"https://www.motionelements.com/signup/verify?code=\", \"\");\r",
											"\r",
											"    var linkForActivation = code;\r",
											"    linkForActivation = linkForActivation.substring(0, linkForActivation.indexOf('&'));\r",
											"    pm.expect(linkForActivation).to.be.string;\r",
											"    pm.environment.set(\"linkForActivation\", linkForActivation);\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Host",
										"value": "mailsac.com",
										"type": "text"
									},
									{
										"key": "Mailsac-Key",
										"value": "{{mailsacApi}}",
										"type": "text"
									},
									{
										"key": "content-type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://mailsac.com/api/dirty/{{email}}/{{messageIDFreelancer}}",
									"protocol": "https",
									"host": [
										"mailsac",
										"com"
									],
									"path": [
										"api",
										"dirty",
										"{{email}}",
										"{{messageIDFreelancer}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify email",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3a57228-0180-4136-86ba-aea9486706c2",
										"exec": [
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"var messages = response.messages[0];\r",
											"var object = messages.object;\r",
											"var type = messages.type;\r",
											"var level = messages.level;\r",
											"var title = messages.title;\r",
											"\r",
											"var getTitleMessage = \"Your account is activated.\"\r",
											"\r",
											"pm.test(\"Response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Object: \" + object, function () {\r",
											"    pm.expect(object).to.not.be.null;\r",
											"    pm.expect(object).to.eql(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"type: \" + type, function () {\r",
											"    pm.expect(type).to.not.be.null;\r",
											"    pm.expect(type).to.eql(\"alert\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"level: \" + level, function () {\r",
											"    pm.expect(level).to.not.be.null;\r",
											"    pm.expect(level).to.eql(\"success\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"title: \" + title, function () {\r",
											"    pm.expect(title).to.not.be.null;\r",
											"    pm.expect(title).to.eql(getTitleMessage);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{linkForActivation}}",
											"description": "Verify code sent in email.",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v2/account/verify",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v2",
										"account",
										"verify"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "19d5088a-7546-4323-ab41-f9718d209370",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5291766f-aafd-401e-bd03-98a818a0c8c2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Signup Negative tests",
					"item": [
						{
							"name": "Signup with registered user ( Negative test )",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d4983c0f-1ce7-456f-9a2b-ddbe9e8420f9",
										"exec": [
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"var errors = response.errors[0];\r",
											"var messages = response.messages[0];\r",
											"\r",
											"var titleError = errors.title;\r",
											"var detail = errors.detail;\r",
											"\r",
											"var object = messages.object;\r",
											"var type = messages.type;\r",
											"var level = messages.level;\r",
											"var titleMessage = messages.title;\r",
											"\r",
											"var getTitleMessage = \"You already have a MotionElements account.\"\r",
											"\r",
											"pm.test(\"Response is ok, expected 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Title on error: \" + titleError, function () {\r",
											"    pm.expect(titleError).to.not.be.null;\r",
											"    pm.expect(titleError).to.eql(\"Account exists.\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Detail: \" + detail, function () {\r",
											"    pm.expect(detail).to.not.be.null;\r",
											"    pm.expect(detail).to.eql(titleMessage);\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Object: \" + object, function () {\r",
											"    pm.expect(object).to.not.be.null;\r",
											"    pm.expect(object).to.eql(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Type: \" + type, function () {\r",
											"    pm.expect(type).to.not.be.null;\r",
											"    pm.expect(type).to.eql(\"alert\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Level: \" + level, function () {\r",
											"    pm.expect(level).to.not.be.null;\r",
											"    pm.expect(level).to.eql(\"info\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"Title Message: \" + titleMessage, function () {\r",
											"    pm.expect(titleMessage).to.not.be.null;\r",
											"    pm.expect(titleMessage).to.eql(getTitleMessage);\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "email",
											"value": "{{email}}",
											"description": "email",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{signup_password}}",
											"description": "password",
											"type": "text"
										},
										{
											"key": "first_name",
											"value": "foo",
											"type": "text"
										},
										{
											"key": "last_name",
											"value": "bar",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v2/account/signup",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v2",
										"account",
										"signup"
									]
								}
							},
							"response": []
						},
						{
							"name": "Verify email after verification ( Negative test )",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "98dab186-fed4-46b0-a568-f88fd6d8e476",
										"exec": [
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"var messages = response.messages[0];\r",
											"var object = messages.object;\r",
											"var type = messages.type;\r",
											"var level = messages.level;\r",
											"var title = messages.title;\r",
											"\r",
											"var getTitleMessage = \"Your email is already verified.\"\r",
											"\r",
											"pm.test(\"Response is ok\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Object: \" + object, function () {\r",
											"    pm.expect(object).to.not.be.null;\r",
											"    pm.expect(object).to.eql(\"message\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"type: \" + type, function () {\r",
											"    pm.expect(type).to.not.be.null;\r",
											"    pm.expect(type).to.eql(\"alert\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"level: \" + level, function () {\r",
											"    pm.expect(level).to.not.be.null;\r",
											"    pm.expect(level).to.eql(\"info\");\r",
											"\r",
											"});\r",
											"\r",
											"pm.test(\"title: \" + title, function () {\r",
											"    pm.expect(title).to.not.be.null;\r",
											"    pm.expect(title).to.eql(getTitleMessage);\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "code",
											"value": "{{linkForActivation}}",
											"description": "Verify code sent in email.",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v2/account/verify",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v2",
										"account",
										"verify"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login without password ( Negative test )",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66a53a8b-bcb9-4b71-840a-5aa932486ea1",
										"exec": [
											"\r",
											"var response = JSON.parse(responseBody);\r",
											"var title = response.errors[0].title;\r",
											"\r",
											"var getTitleMessage = \"Failed to login.\"\r",
											"\r",
											"pm.test(\"Response is ok\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"title: \" + title, function () {\r",
											"    pm.expect(title).to.not.be.null;\r",
											"    pm.expect(title).to.eql(getTitleMessage);\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{email}}",
											"description": "Username or email address.",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Password",
											"type": "text"
										}
									],
									"options": {
										"urlencoded": {}
									}
								},
								"url": {
									"raw": "{{endpoint}}/v2/account/login",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"v2",
										"account",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "1. Create member\r\n2. Verify email\r\n3. Login with newly created memeder\r\n\r\n(Negative Tests for login, signup)",
			"protocolProfileBehavior": {}
		},
		{
			"name": "Account ",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ce5f9fd-7795-4ab3-916a-f3e17694bf45",
								"exec": [
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var messages = response.messages[0];\r",
									"var object = messages.object;\r",
									"var type = messages.type;\r",
									"var level = messages.level;\r",
									"var title = messages.title;\r",
									"\r",
									"var getTitleMessage = \"Welcome back, foo\"\r",
									"\r",
									"pm.test(\"Response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Object: \" + object, function () {\r",
									"    pm.expect(object).to.not.be.null;\r",
									"    pm.expect(object).to.eql(\"message\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"type: \" + type, function () {\r",
									"    pm.expect(type).to.not.be.null;\r",
									"    pm.expect(type).to.eql(\"flash\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"level: \" + level, function () {\r",
									"    pm.expect(level).to.not.be.null;\r",
									"    pm.expect(level).to.eql(\"success\");\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"title: \" + title, function () {\r",
									"    pm.expect(title).to.not.be.null;\r",
									"    pm.expect(title).to.eql(getTitleMessage);\r",
									"\r",
									"});\r",
									"\r",
									"//saving cookies with tokens\r",
									"\r",
									"var jwt_token = postman.getResponseCookie(\"ME_jwt\").value;\r",
									"pm.environment.set('jwt_token', jwt_token);\r",
									"\r",
									"var jwt_token_sig = postman.getResponseCookie(\"ME_jwt_sig\").value;\r",
									"pm.environment.set('jwt_token_sig', jwt_token_sig);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{email}}",
									"description": "Username or email address.",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{signup_password}}",
									"type": "text"
								}
							],
							"options": {
								"urlencoded": {}
							}
						},
						"url": {
							"raw": "{{endpoint}}/v2/account/login",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"v2",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get account details",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "30c17f06-cd60-4fc0-9659-0c48f65cae6d",
								"exec": [
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var data = response.data;\r",
									"var user_id = response.data.id;\r",
									"var full_name = data.full_name;\r",
									"var first_name = data.first_name;\r",
									"var last_name = data.last_name;\r",
									"var username = data.username;\r",
									"var email = data.email;\r",
									"var email_verified = data.email_verified;\r",
									"var currency = data.currency;\r",
									"\r",
									"var getEmail = pm.environment.get(\"email\")\r",
									"var getCurrency = \"usd\";\r",
									"\r",
									"pm.test(\"Response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"user_id: \" + user_id, function () {\r",
									"    pm.expect(user_id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"full_name: \" + full_name, function () {\r",
									"    pm.expect(full_name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"first_name: \" + first_name, function () {\r",
									"    pm.expect(first_name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"last_name: \" + last_name, function () {\r",
									"    pm.expect(last_name).to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"username: \" + username, function () {\r",
									"    pm.expect(username).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"email: \" + email, function () {\r",
									"    pm.expect(email).to.not.be.empty;\r",
									"    pm.expect(email).to.eql(getEmail);\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"email_verified: \" + email_verified, function () {\r",
									"    pm.expect(email_verified).to.be.true;\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"currency: \" + currency, function () {\r",
									"    pm.expect(currency).to.eql(getCurrency);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{endpoint}}/v2/account",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"v2",
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get account downloads limit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc12bb74-f50e-4ab9-b1f0-105c959ff718",
								"exec": [
									"\r",
									"var response = JSON.parse(responseBody);\r",
									"var data = response.data;\r",
									"var downloads_remaining = data.downloads_remaining;\r",
									"var interval = data.interval;\r",
									"\r",
									"pm.test(\"Response is ok\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"downloads_remaining: \" + downloads_remaining, function () {\r",
									"    pm.expect(downloads_remaining).to.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"interval: \" + interval, function () {\r",
									"    pm.expect(interval).to.not.be.empty;\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{endpoint}}/v2/account/free-download",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"v2",
								"account",
								"free-download"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}